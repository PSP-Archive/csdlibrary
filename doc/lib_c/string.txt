/******************************************************************************
 *                                                                            *
 *      string.c                                                              *
 *                                                                            *
 *      メモリ・文字列関数                                                    *
 *                                                                            *
 ******************************************************************************/

  更新履歴

  2005/06/12 Version 1.02 ・strcspn, strncpy, strspn を追加した。

  2005/06/09 Version 1.01 ・strcmp, stricmp で文字列s2の長さより文字列s1の
                            長さが短い場合の戻り値が違っていたので修正した。

  2005/06/03 Version 1.00 ・memcmp, memcpy, memset, strcat, strchr, strcmp
                            strcpy, stricmp, strlen, strlwr, strrchr, strupr を
                            追加した。

  関数一覧

 +----------------------+------+------+------+--------------------------------+
 |        関数名        | 対応 | 追加 | 修正 |              備考              |
 +----------------------+------+------+------+--------------------------------+
 | memccpy              |      |      |      |                                |
 | memchr               |      |      |      |                                |
 | memcmp               |  ○  | 1.00 |      |                                |
 | memcpy               |  ○  | 1.00 |      |                                |
 | memmove              |      |      |      |                                |
 | memset               |  ○  | 1.00 |      |                                |
 | strcat               |  ○  | 1.00 |      |                                |
 | strchr               |  ○  | 1.00 |      |                                |
 | strcmp               |  ○  | 1.00 | 1.01 |                                |
 | strcmpi              |      |      |      |                                |
 | strcoll              |      |      |      |                                |
 | strcpy               |  ○  | 1.00 |      |                                |
 | strcspn              |  ○  | 1.02 |      |                                |
 | strdup               |      |      |      |                                |
 | strerror             |      |      |      |                                |
 | stricmp              |  ○  | 1.00 | 1.01 |                                |
 | strlen               |  ○  | 1.00 |      |                                |
 | strlwr               |  ○  | 1.00 |      |                                |
 | strncat              |      |      |      |                                |
 | strncmp              |      |      |      |                                |
 | strncmpi             |      |      |      |                                |
 | strncpy              |  ○  | 1.02 |      |                                |
 | strnicmp             |      |      |      |                                |
 | strpbrk              |      |      |      |                                |
 | strrchr              |  ○  | 1.00 |      |                                |
 | strspn               |  ○  | 1.02 |      |                                |
 | strstr               |      |      |      |                                |
 | strtok               |      |      |      |                                |
 | strupr               |  ○  | 1.00 |      |                                |
 | strxfrm              |      |      |      |                                |
 +----------------------+------+------+------+--------------------------------+

  ※ヘッダにある関数をリストアップしただけです。今後の予定ではありません。

/******************************************************************************
 *
 * 関 数 名：memcmp / 指定バイト分のメモリ比較
 *
 * 呼出形式：#include <string.h>
 *           int memcmp(const void *s1, const void *s2, size_t n);
 *
 * 解    説：ブロックs1とブロックs2を先頭からnバイト比較します。比較は文字を
 *           unsigned charとして行います。
 *
 * 戻 り 値：以下の比較結果を返します。
 *           ------------------------------------------------------------------
 *           戻り値                        意味
 *           ------------------------------------------------------------------
 *           負                            s1がs2よりも小さい
 *           ゼロ                          s1とs2が等しい
 *           正                            s1がs2よりも大きい
 *           ------------------------------------------------------------------
 *
 ******************************************************************************/

/******************************************************************************
 *
 * 関 数 名：memcpy / 指定バイト分のメモリコピー
 *
 * 呼出形式：#include <string.h>
 *           void *memcpy(void *dest, const void *src, size_t n);
 *
 * 解    説：srcで示されるバッファのnバイトのブロックをdestの示すバッファにコピ
 *           ーします。
 *
 * 戻 り 値：バッファdestのアドレスを返します。
 *
 ******************************************************************************/

/******************************************************************************
 *
 * 関 数 名：memset / 指定文字のメモリ充填
 *
 * 呼出形式：#include <string.h>
 *           void *memset(void *s, int c, size_t n);
 *
 * 解    説：sで示されるバッファの先頭からnバイトに文字cを充填します。
 *
 * 戻 り 値：バッファsのアドレスを返します。
 *
 ******************************************************************************/

/******************************************************************************
 *
 * 関 数 名：strcat / 文字列の連結
 *
 * 呼出形式：#include <string.h>
 *           char *strcat(char *dest, const char *src);
 *
 * 解    説：文字列srcをdestの終端からコピーします。strcatはヌルターミネータに
 *           出会うと、destにヌル文字(\0)を付加してからコピーを終了します。src
 *           およびdestはヌル文字で終了する文字列でなければなりません。またdest
 *           はsrcの文字列の長さ分、余計に確保されている必要があります。
 *
 * 戻 り 値：文字列destのアドレスを返します。
 *
 ******************************************************************************/

/******************************************************************************
 *
 * 関 数 名：strchr / 文字列中での指定文字の検索
 *
 * 呼出形式：#include <string.h>
 *           char *strchr(const char *s, int c);
 *
 * 解    説：文字列s中の最初に現れる文字cを検索します。文字列sのヌルターミネー
 *           ターも検索の対象となります。したがって文字cにはヌル文字(\0)も指定
 *           することができ、その場合には文字列の終端を示すヌルターミネータの位
 *           置を取得します。sの示す文字列はヌル文字で終了していなければなりま
 *           せん。
 *
 * 戻 り 値：文字cが見つかった場合はそのアドレスを返します。見つからなかった場
 *           合はNULLを返します。
 *
 ******************************************************************************/

/******************************************************************************
 *
 * 関 数 名：strcmp / 文字列どうしの比較
 *
 * 呼出形式：#include <string.h>
 *           int strcmp(const char *s1, const char *s2);
 *
 * 解    説：文字列s1と文字列s2を比較します。比較は文字をunsigned charとして行
 *           い、違う文字を見つけるか、文字列の終端に達するかまで続行します。
 *
 * 戻 り 値：以下の比較結果を返します。
 *           ------------------------------------------------------------------
 *           戻り値                        意味
 *           ------------------------------------------------------------------
 *           負                            s1がs2よりも小さい
 *           ゼロ                          s1とs2が等しい
 *           正                            s1がs2よりも大きい
 *           ------------------------------------------------------------------
 *
 ******************************************************************************/

/******************************************************************************
 *
 * 関 数 名：strcpy / 文字列のコピー
 *
 * 呼出形式：#include <string.h>
 *           char *strcpy(char *dest, const char *src);
 *
 * 解    説：文字列srcをdestへコピーします。strcpyはヌルターミネータに出会うと、
 *           destにヌル文字(\0)を付加してからコピーを終了します。srcはヌル文字
 *           で終了する文字列でなければなりません。またdestは最低でもsrcの文字
 *           列の長さ分確保されている必要があります。
 *
 * 戻 り 値：文字列destのアドレスを返します。
 *
 ******************************************************************************/

/******************************************************************************
 *
 * 関 数 名：stricmp / 文字列どうしの比較（大文字・小文字の区別をしない）
 *
 * 呼出形式：#include <string.h>
 *           int stricmp(const char *s1, const char *s2);
 *
 * 解    説：文字列s1と文字列s2を比較します。比較は文字列をunsigned charとして
 *           行い、ちがう文字を見つけるか、文字列の終端に達するかまで続行します。
 *           ただし、比較は大文字と小文字の区別をせずに行います。
 *
 * 戻 り 値：以下の比較結果を返します。
 *           ------------------------------------------------------------------
 *           戻り値                        意味
 *           ------------------------------------------------------------------
 *           負                            s1がs2よりも小さい
 *           ゼロ                          s1とs2が等しい
 *           正                            s1がs2よりも大きい
 *           ------------------------------------------------------------------
 *
 ******************************************************************************/

/******************************************************************************
 *
 * 関 数 名：strlen / 文字列長の取得
 *
 * 呼出形式：#include <string.h>
 *           size_t strlen(const char *s);
 *
 * 解    説：文字列sの長さを取得します。文字列の長さとは文字列の先頭から、ヌル
 *           文字(\0)までのバイト数をいいます（ヌル文字は数えません）。sに指定
 *           する文字列はヌル文字で終了していなければなりません。
 *
 * 戻 り 値：文字列の長さを返します。
 *
 ******************************************************************************/

/******************************************************************************
 *
 * 関 数 名：strlwr / 文字列中の大文字→小文字変換
 *
 * 呼出形式：#include <string.h>
 *           char *strlwr(char *str);
 *
 * 解    説：文字列str中にある英大文字（'A'〜'Z'）をすべて英小文字（'a'〜'z'）
 *           に変換します。
 *
 * 戻 り 値：文字列strのアドレスを返します。
 *
 ******************************************************************************/

/******************************************************************************
 *
 * 関 数 名：strrchr / 文字列中での指定文字の後方からの検索
 *
 * 呼出形式：#include <string.h>
 *           char *strrchr(const char *s, int c);
 *
 * 解    説：文字列s中の最後に現れる文字cを検索します。文字列sのヌルターミネー
 *           ターも検索の対象となります。したがって文字cにはヌル文字(\0)も指定
 *           することができ、その場合には文字列の終端を示すヌルターミネータの位
 *           置を取得します。sの示す文字列はヌル文字で終了していなければなりま
 *           せん。
 *
 * 戻 り 値：文字cが見つかった場合はそのアドレスを返します。見つからなかった場
 *           合はNULLを返します。
 *
 ******************************************************************************/

/******************************************************************************
 *
 * 関 数 名：strupr / 文字列中の小文字→大文字変換
 *
 * 呼出形式：#include <string.h>
 *           char *strupr(char *str);
 *
 * 解    説：文字列str中にある英小文字（'a'〜'z'）をすべて英大文字（'A'〜'Z'）
 *           に変換します。
 *
 * 戻 り 値：文字列strのアドレスを返します。
 *
 ******************************************************************************/

